generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions   Session[]
  accounts   Account[]
  interviews Interview[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Interview {
  id        String   @id @default(cuid())
  userId    String
  role      String
  level     String
  type      String // e.g. "Technical", "Behavioral", "Mixed"
  techstack String[] // e.g. ["React", "TypeScript", "Next.js"]
  questions Json // stores ["What is React?", ...]
  finalized Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback Feedback?
}

model Feedback {
  id                  String   @id @default(cuid())
  interviewId         String   @unique
  totalScore          Int // 0–100
  finalAssessment     String // narrative summary
  categoryScores      Json // [{ name, score, comment }, …]
  strengths           String[] // ["Good articulation", …]
  areasForImprovement String[] // ["Needs deeper technical detail", …]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}
